/* DO NOT EDIT THIS FILE */

#include <GL/glew.h>
#include <GL/glut.h>
#include <GL/glxew.h>

#include <GL/freeglut_ext.h>
#include <stdbool.h>
#include <stdlib.h>
#include <time.h>

#include "shader.h"
#include "display.h"
#include "texture.h"
#include "vertexArray.h"
#include "vertexBuffer.h"
#include "indexBuffer.h"

extern "C"{
#include "image.h"
#include "log.h"
}

#define WIDTH 640
#define HEIGHT 480


typedef struct display {
    unsigned int width;
    unsigned int height;
    unsigned int window_id;

    image_dir_t* image_dir;
    Texture* texture;
    bool enabled;

} display_t;

static display_t* display = NULL;


int display_init(image_dir_t* image_dir) {
    if (display != NULL) {
        LOG_ERROR("display has already been initialised");
        goto fail_exit;
    }

    display = (display_t*) malloc(sizeof(display_t));

    display->width     = WIDTH;
    display->height    = HEIGHT;
    display->window_id = 0;

    display->image_dir = image_dir;
    display->texture   = nullptr;
    display->enabled   = true;

    return 0;

fail_exit:
    return -1;
}

void display_destroy() {
    if (display != NULL) {
        free(display);
        display = NULL;
    }
}

static int pre_display() {
    if (display == NULL) {
        LOG_ERROR("display has not been initialised");
        goto fail_exit;
    }

    glViewport(0, 0, display->width, display->height);
    if (LOG_ERROR_OPENGL("glViewport") < 0) {
        goto fail_exit;
    }

    /*glMatrixMode(GL_PROJECTION);
    if (LOG_ERROR_OPENGL("glMatrixMode") < 0) {
        goto fail_exit;
    }

    glLoadIdentity();
    if (LOG_ERROR_OPENGL("glLoadIdentity") < 0) {
        goto fail_exit;
    }

    gluOrtho2D(0.0, 1.0, 0.0, 1.0);*/

    glClearColor(0.0f, 0.0f, 0.0f, 1.0f);
    if (LOG_ERROR_OPENGL("glClearColor") < 0) {
        goto fail_exit;
    }


    glClear(GL_COLOR_BUFFER_BIT);
    if (LOG_ERROR_OPENGL("glClear") < 0) {
        goto fail_exit;
    }

    return 0;

fail_exit:
    return -1;
}
 
static int render() {
    float positions[] = {
       -0.5f, -0.5f, 0.0f, 0.0f, 
        0.5f, -0.5f, 1.0f, 0.0f, 
        0.5f, 0.5f, 1.0f, 1.0f, 
       -0.5f, 0.5f, 0.0f, 1.0f  
    };

    unsigned int indices[] = {
        0, 1, 2,
        2, 3, 0
    };

    vertexArray va;
    vertexBuffer vb(positions, sizeof(positions));


    vertexBufferLayout layout;
    layout.Push<float>(2);
    layout.Push<float>(2);

    indexBuffer ib(indices, 6);
    
    shader myShader("res/shaders/basic.glsl");
    myShader.Bind();
    //myShader.SetUniform4f("u_color", 0.2f, 0.3f, 0.8f, 1.0f);

    image_t* image = NULL;

    if (display == NULL)
    {
        LOG_ERROR("display has not been initialised");
        goto fail_exit;
    }

    if (display->image_dir == NULL)
    {
        LOG_ERROR_NULL_PTR();
        goto fail_exit;
    }

    
    if (display->enabled && (image = image_dir_load_next(display->image_dir)) != NULL) {

        if (image == NULL)
        {
            LOG_ERROR("Image is NULL");
            goto fail_exit;
        }
        
       if(display->texture != nullptr)
        {
            display->texture = nullptr;
        }

        display->texture = new Texture(image);

        if(display->texture->Bind(0) < 0)
        {
            LOG_ERROR("Error binding the texture");
            goto fail_exit;
        }
        myShader.SetUniform1i("u_Texture", 0);

        va.Unbind();
        vb.Unbind();
        ib.Unbind();
        myShader.Unbind();

        /*glEnable(GL_TEXTURE_2D);
        if (LOG_ERROR_OPENGL("glEnable") < 0) {
            goto fail_exit;
        }*/

        glDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, nullptr);

    }

    return 0;

fail_exit:
    return -1;
}

static inline void post_display() {
    glutSwapBuffers();
}

static void callback_display() {
    if (pre_display() < 0) {
        LOG_ERROR("pre-display failed");
    }

    if (render() < 0) {
        LOG_ERROR("display failed");
    }

    post_display();
}

static void callback_idle() {
    glutSetWindow(display->window_id);
    glutPostRedisplay();
}

void callback_keyboard(unsigned char key, int x, int y) {
    if (display == NULL) {
        LOG_ERROR("viewer has not been initialised");
        return;
    }

    switch (key) {
    case 'q':
        printf("Closing application\n");
        glutLeaveMainLoop();
        break;

    case '1':
        printf("Selected serial implementation\n");
        break;

    case '2':
        printf("Selected openmp implementation\n");
        break;

    case '3':
        printf("Selected opencl implementation\n");
        break;

    case ' ':
        printf("Rendering %s\n", display->enabled ? "disabled" : "enabled");
        display->enabled = !display->enabled;
        break;

    default:
        break;
    }
}

static void callback_reshape(int width, int height) {
    glutSetWindow(display->window_id);
    glutReshapeWindow(width, height);

    display->width  = width;
    display->height = height;
}

int display_open() {
    if (display == NULL) {
        LOG_ERROR("display has not been initialised");
        return -1;
    }

    glutInitDisplayMode(GLUT_RGBA | GLUT_DOUBLE);

    int x_pos = (glutGet(GLUT_SCREEN_WIDTH) - display->width) / 2;
    int y_pos = (glutGet(GLUT_SCREEN_HEIGHT) - display->height) / 2;

    glutInitWindowPosition(x_pos, y_pos);
    glutInitWindowSize(display->width, display->height);
    display->window_id = glutCreateWindow("image_resultat");

    glutDisplayFunc(callback_display);
    glutIdleFunc(callback_idle);
    glutKeyboardFunc(callback_keyboard);

    //glutReshapeFunc(callback_reshape);
    glewInit();
    glXSwapIntervalMESA(0);

    glutMainLoop();

    return 0;
}
